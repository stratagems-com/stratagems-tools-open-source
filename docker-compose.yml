version: "3.8"

services:
  # =============================================================================
  # Main Application
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://mongo:27017/st-open-source
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - RATE_LIMIT_POINTS=${RATE_LIMIT_POINTS}
      - RATE_LIMIT_DURATION=${RATE_LIMIT_DURATION}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ENABLE_WORKFLOW_INTEGRATION=${ENABLE_WORKFLOW_INTEGRATION}
      - ENABLE_AUDIT_TRAILS=${ENABLE_AUDIT_TRAILS}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - ENABLE_NOTIFICATIONS=${ENABLE_NOTIFICATIONS}
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - st-network
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads

  # =============================================================================
  # MongoDB Database
  # =============================================================================
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=st-open-source
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - st-network
    command: mongod --auth

  # =============================================================================
  # PostgreSQL Database (Alternative)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=st-open-source
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - st-network
    profiles:
      - postgres

  # =============================================================================
  # Redis Cache (Optional)
  # =============================================================================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - st-network
    profiles:
      - cache

  # =============================================================================
  # n8n Workflow Automation
  # =============================================================================
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-password}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - WEBHOOK_URL=http://localhost:5678
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped
    networks:
      - st-network
    profiles:
      - workflow

  # =============================================================================
  # Prometheus Monitoring
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - st-network
    profiles:
      - monitoring

  # =============================================================================
  # Grafana Dashboard
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - st-network
    profiles:
      - monitoring

  # =============================================================================
  # Development Services
  # =============================================================================
  dev-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mongodb://mongo:27017/st-open-source-dev
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - st-network
    profiles:
      - dev
    command: pnpm dev

# =============================================================================
# Networks
# =============================================================================
networks:
  st-network:
    driver: bridge

# =============================================================================
# Volumes
# =============================================================================
volumes:
  mongo_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
