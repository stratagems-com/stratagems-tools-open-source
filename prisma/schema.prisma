// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// =============================================================================
// AUTHENTICATION & USER MANAGEMENT
// =============================================================================

model User {
    id              String    @id @default(cuid())
    email           String    @unique
    username        String?   @unique
    firstName       String?
    lastName        String?
    passwordHash    String
    role            UserRole  @default(ADMIN)
    isActive        Boolean   @default(true)
    isEmailVerified Boolean   @default(false)
    lastLoginAt     DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    // Profile information
    avatar      String? // URL to avatar image
    timezone    String? @default("UTC")
    language    String? @default("en")
    phoneNumber String?

    // Security settings
    twoFactorEnabled Boolean @default(false)
    twoFactorSecret  String? // TOTP secret

    // Relations
    sessions           Session[]
    loginAttempts      LoginAttempt[]
    passwordResets     PasswordReset[]
    emailVerifications EmailVerification[]
    auditLogs          AuditLog[]
    invitations        UserInvitation[]

    @@index([email])
    @@index([username])
    @@index([role])
    @@index([isActive])
    @@index([createdAt])
    @@map("users")
}

model UserInvitation {
    id          String    @id @default(cuid())
    email       String    @unique
    token       String    @unique
    expiresAt   DateTime
    isUsed      Boolean   @default(false)
    usedAt      DateTime?
    invitedById String
    invitedBy   User      @relation(fields: [invitedById], references: [id])
    createdAt   DateTime  @default(now())

    @@index([email])
    @@index([token])
    @@map("user_invitations")
}

model Session {
    id               String    @id @default(cuid())
    userId           String
    user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    token            String    @unique // JWT token or session token
    refreshToken     String?   @unique
    expiresAt        DateTime
    refreshExpiresAt DateTime?
    isActive         Boolean   @default(true)
    createdAt        DateTime  @default(now())
    lastAccessedAt   DateTime  @default(now())

    // Geographic and device information
    ipAddress String
    userAgent String?
    country   String?
    region    String?
    city      String?
    latitude  Float?
    longitude Float?
    timezone  String?

    // Device fingerprinting
    deviceId       String? // Device fingerprint
    browserName    String?
    browserVersion String?
    osName         String?
    osVersion      String?
    deviceType     DeviceType @default(UNKNOWN)
    isMobile       Boolean    @default(false)

    // Security flags
    isBot     Boolean @default(false)
    isTrusted Boolean @default(false)
    riskScore Int     @default(0) // 0-100 risk assessment

    @@index([userId])
    @@index([token])
    @@index([refreshToken])
    @@index([isActive])
    @@index([expiresAt])
    @@index([ipAddress])
    @@index([country])
    @@index([createdAt])
    @@index([lastAccessedAt])
    @@map("sessions")
}

model LoginAttempt {
    id            String   @id @default(cuid())
    userId        String? // null for failed attempts with unknown user
    user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    email         String // Always store attempted email
    success       Boolean
    failureReason String? // "invalid_password", "user_not_found", "account_locked", etc.
    ipAddress     String
    userAgent     String?
    country       String?
    region        String?
    city          String?
    createdAt     DateTime @default(now())

    // Security analysis
    isBot        Boolean @default(false)
    isSuspicious Boolean @default(false)
    riskScore    Int     @default(0)

    @@index([userId])
    @@index([email])
    @@index([success])
    @@index([ipAddress])
    @@index([createdAt])
    @@index([country])
    @@map("login_attempts")
}

model PasswordReset {
    id        String    @id @default(cuid())
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    token     String    @unique
    expiresAt DateTime
    isUsed    Boolean   @default(false)
    usedAt    DateTime?
    ipAddress String
    userAgent String?
    createdAt DateTime  @default(now())

    @@index([userId])
    @@index([token])
    @@index([expiresAt])
    @@index([isUsed])
    @@map("password_resets")
}

model EmailVerification {
    id        String    @id @default(cuid())
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    token     String    @unique
    email     String // Email being verified (might be different from current user email)
    expiresAt DateTime
    isUsed    Boolean   @default(false)
    usedAt    DateTime?
    ipAddress String
    userAgent String?
    createdAt DateTime  @default(now())

    @@index([userId])
    @@index([token])
    @@index([email])
    @@index([expiresAt])
    @@index([isUsed])
    @@map("email_verifications")
}

// =============================================================================
// AUDIT & SECURITY LOGGING
// =============================================================================

model AuditLog {
    id           String   @id @default(cuid())
    userId       String? // null for system actions
    user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
    action       String // "login", "logout", "password_change", "user_created", etc.
    resource     String? // "user", "lookup", "set", "app", etc.
    resourceId   String? // ID of the affected resource
    details      Json? // Additional context/metadata
    ipAddress    String
    userAgent    String?
    country      String?
    region       String?
    success      Boolean  @default(true)
    errorMessage String?
    createdAt    DateTime @default(now())

    @@index([userId])
    @@index([action])
    @@index([resource])
    @@index([resourceId])
    @@index([ipAddress])
    @@index([country])
    @@index([createdAt])
    @@index([success])
    @@map("audit_logs")
}

model SecurityEvent {
    id          String            @id @default(cuid())
    type        SecurityEventType
    severity    SecuritySeverity  @default(LOW)
    description String
    ipAddress   String
    userAgent   String?
    userId      String? // Associated user if known
    details     Json? // Additional event data
    isResolved  Boolean           @default(false)
    resolvedAt  DateTime?
    resolvedBy  String? // User ID who resolved it
    country     String?
    region      String?
    createdAt   DateTime          @default(now())

    @@index([type])
    @@index([severity])
    @@index([ipAddress])
    @@index([userId])
    @@index([isResolved])
    @@index([createdAt])
    @@map("security_events")
}

// =============================================================================
// APP MANAGEMENT (Enhanced)
// =============================================================================

model App {
    id          String     @id @default(cuid())
    name        String     @unique
    description String?
    secret      String     @unique // API secret token
    isActive    Boolean    @default(true)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    activeUntil DateTime?
    permission  Permission @default(WRITE)

    // Enhanced app management
    createdBy  String? // User ID who created this app
    lastUsedAt DateTime?
    usageCount Int       @default(0)

    @@index([name])
    @@index([secret])
    @@index([isActive])
    @@index([createdAt])
    @@index([createdBy])
    @@map("apps")
}

// =============================================================================
// LOOKUP SYSTEM (Unchanged)
// =============================================================================

model Lookup {
    id                 String   @id @default(cuid())
    name               String   @unique
    description        String?
    leftSystem         String?
    rightSystem        String?
    allowLeftDups      Boolean  @default(true)
    allowRightDups     Boolean  @default(true)
    allowLeftRightDups Boolean  @default(true)
    strictChecking     Boolean  @default(false)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    // Relations
    values LookupValue[]

    @@index([leftSystem])
    @@index([rightSystem])
    @@index([createdAt])
    @@map("lookups")
}

model LookupValue {
    id            String   @id @default(cuid())
    lookupId      String
    lookup        Lookup   @relation(fields: [lookupId], references: [id], onDelete: Cascade)
    left          String
    right         String
    leftMetadata  Json?
    rightMetadata Json?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@index([lookupId])
    @@index([left])
    @@index([right])
    @@index([lookupId, left])
    @@index([lookupId, right])
    @@index([lookupId, left, right])
    @@index([createdAt])
    @@map("lookup_values")
}

// =============================================================================
// SET SYSTEM (Unchanged)
// =============================================================================

model Set {
    id              String   @id @default(cuid())
    name            String   @unique
    description     String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    allowDuplicates Boolean  @default(true)
    strictChecking  Boolean  @default(false)

    // Relations
    values SetValue[]

    @@index([name])
    @@index([createdAt])
    @@map("sets")
}

model SetValue {
    id        String   @id @default(cuid())
    setId     String
    set       Set      @relation(fields: [setId], references: [id], onDelete: Cascade)
    value     String
    metadata  Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([setId])
    @@index([value])
    @@index([setId, value])
    @@index([createdAt])
    @@map("set_values")
}

// =============================================================================
// WARNING SYSTEM
// =============================================================================

model Warning {
    id        String   @id @default(cuid())
    type      String   // "lookup", "set", etc.
    typeName  String   // Name of the lookup/set
    typeId    String   // ID of the lookup/set
    itemId    String   // ID of the specific item with the warning
    issuedAt  DateTime @default(now())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Duplicate type flags
    leftDuplicate      Boolean @default(false)
    rightDuplicate     Boolean @default(false)
    leftRightDuplicate Boolean @default(false)

    // Additional warning metadata
    details Json? // Additional context about the warning
    severity WarningSeverity @default(MEDIUM)
    isResolved Boolean @default(false)
    resolvedAt DateTime?
    resolvedBy String? // User ID who resolved it

    @@index([type])
    @@index([typeId])
    @@index([itemId])
    @@index([isResolved])
    @@index([severity])
    @@index([createdAt])
    @@map("warnings")
}

// =============================================================================
// ENUMS
// =============================================================================

enum Permission {
    READ
    WRITE
    NONE
}

enum UserRole {
    SUPER_ADMIN // Full system access
    ADMIN // Admin dashboard access
    VIEWER // Read-only access
}

enum DeviceType {
    DESKTOP
    MOBILE
    TABLET
    BOT
    UNKNOWN
}

enum SecurityEventType {
    BRUTE_FORCE_ATTEMPT
    SUSPICIOUS_LOGIN
    MULTIPLE_FAILED_LOGINS
    UNUSUAL_LOCATION
    ACCOUNT_LOCKOUT
    PRIVILEGE_ESCALATION
    DATA_BREACH_ATTEMPT
    UNAUTHORIZED_ACCESS
    MALICIOUS_REQUEST
}

enum SecuritySeverity {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum WarningSeverity {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}
